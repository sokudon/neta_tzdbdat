https://grok.com/chat/ffc3b742-e890-439a-89dc-3639c4f9919a


pfp
アメリカニューヨークは動くがオーストラリアがうまく動かない

        private string get_rule_offset(ZoneInfos tz)
        {
            long[] SavTrans= new long[tz.Rules.Length+1];
            int[] SavOffsets = new int[tz.Rules.Length+1];
            try
            {
                DateTime date;
                string dd = Properties.Settings.Default.testdt;
                // UTC時間をUnixタイムスタンプ（秒）に変換
                long unixTimestamp = 0;
                if (!DateTime.TryParse(dd, out date))
                {
                    unixTimestamp = ((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds();

                }
                else
                {
                    unixTimestamp = ((DateTimeOffset)date).ToUnixTimeSeconds();
                }

                string tzst = tzdb_names.Text;
                string tmp = "";
                bool ch = div3600.Checked;

                var i = 0;
                int thisyear = DateTime.Now.Year;
                const long MinSeconds = -62135596800L;
                const long MaxSeconds = 253402300799L;

                SavTrans[SavTrans.Length-1] = MaxSeconds;
                SavOffsets[0] = tz.Rules[0].StandardOffset;

                textBox3.Text += $"this year transition\r\n";
                foreach (var rr in tz.Rules)
                {
                    DateTimeOffset dt = new DateTime(thisyear, (int)rr.Month, (int)rr.DayOfMonth, rr.SecondOfDay/3600, 0, 0, DateTimeKind.Utc);
                    DayOfWeek todayDowEnum = dt.DayOfWeek;
                    int todayDowNumber = (int)todayDowEnum;
                    int dow = rr.DayOfWeek %7;
                    int diff = 7-Math.Abs(todayDowNumber - dow) % 7;

                    dt = dt.AddDays(diff);

                    SavTrans[i] = (dt).ToUnixTimeSeconds()- rr.OffsetBefore;
                    SavOffsets[i+1] = rr.OffsetAfter;
                    DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(SavTrans[i]);
                    DateTime utcDateTime = dateTimeOffset.UtcDateTime;
                    string ut=(utcDateTime.ToString("u")); // "u" フォーマットは UTC 時刻を表示

                    textBox3.Text += $"UTCtransition:{ut},offset:{(double)SavOffsets[i+1]/3600} \r\n";

                    i++;
                }

                Array.Sort(SavTrans, SavOffsets);
                Array.Resize(ref SavTrans, i);

                int svlen = SavTrans.Length;
                if (svlen < 2)
                {
                    int set_index = 0;
                    if (svlen == 1)
                    {
                        set_index = 1;
                    }
                    double offsetSeconds = Convert.ToDouble(SavOffsets[set_index]);
                    int offsetSeconds_i = SavOffsets[set_index];
                    var offset_st = (offsetSeconds_i / 3600).ToString("D2") + ":" + ((offsetSeconds_i % 3600) / 60).ToString("D2");

                    DateTimeOffset localTime = DateTimeOffset.FromUnixTimeSeconds(unixTimestamp).AddSeconds(offsetSeconds);
                    tmp = localTime.ToString("yyyy-MM-ddTHH:mm:ss+" + offset_st).Replace("+-", "-");
                    tmp = tmp + $"\r\nindex:0\r\ntradition:null\r\noffset0:{SavOffsets[set_index]}";

                    return tmp;

                }

                // バイナリーサーチを実行
                long max = SavTrans[svlen - 1];
                long min = SavTrans[0];
                int index = Array.BinarySearch(SavTrans, unixTimestamp);
                if (unixTimestamp > max)
                {
                    index = svlen - 1;
                }
                else if (unixTimestamp < min)
                {
                    index = -1;
                }
                else if (index < 0)
                {
                    index = -(index + 1) - 1;
                }
                if (index < 0)
                {
                    index = -1;
                }

                if (index >= -1 && index < SavOffsets.Length)
                {
                    double offsetSeconds = Convert.ToDouble(SavOffsets[index + 1]);
                    int offsetSeconds_i = SavOffsets[index + 1];
                    var offset_st = (offsetSeconds_i / 3600).ToString("D2") + ":" + ((offsetSeconds_i % 3600) / 60).ToString("D2");

                    DateTimeOffset localTime = DateTimeOffset.FromUnixTimeSeconds(unixTimestamp).AddSeconds(offsetSeconds);
                    tmp = localTime.ToString("yyyy-MM-ddTHH:mm:ss+" + offset_st).Replace("+-", "-");
                }

                long trans = 0;
                if (index >= 0) { trans = SavTrans[index]; }
                else { trans = MinSeconds; }

                var tt = "";
                if (ch)
                {
                    if (trans >= MinSeconds && trans <= MaxSeconds)
                    {

                        DateTime utcDateTime = DateTimeOffset.FromUnixTimeSeconds(trans).UtcDateTime;
                        tt = utcDateTime.ToString("u");
                    }
                    else
                    {
                        tt = "OutOfRange{trans},";
                    }
                }
                double offsetSeconds_ii = SavOffsets[index + 1];
                offsetSeconds_ii = offsetSeconds_ii / 3600;



                tmp = tmp + $"\r\nindex+1:{index + 1}\r\ntradition:{tt}\r\noffset+1:{offsetSeconds_ii}";

                return tmp;
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
//ニューヨーク
ZoneInfoRules: 　//rules[]の配列
Month3,DayOfMonth:8,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: 5,OffsetBefore: 5,OffsetAfter: 4
Month11,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: 5,OffsetBefore: 4,OffsetAfter: 5
fake_posixs:STD5DST4,M3.2.0/2,M11.1.0/2

this year transition
UTCtransition:2025-03-09 07:00:00Z,offset:-4 
UTCtransition:2025-11-02 06:00:00Z,offset:-5 

//Australia/LHI
ZoneInfoRules: 
Month4,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: -10:30,OffsetBefore: -11,OffsetAfter: -10:30
Month10,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: -10:30,OffsetBefore: -10:30,OffsetAfter: -11
fake_posixs:<+10:30>-10:30<+11>-11,M4.1.0/2,M10.1.0/2

this year transition
UTCtransition:2025-04-05 15:00:00Z,offset:10.5 
UTCtransition:2025-10-04 15:30:00Z,offset:11 

australiaだと変位情報がうえにくるのでfakeposixも逆になってます

            string fake_posixs = "";
            foreach (var rr in zoneInfo.Rules)
            {
                if (ch)
                {
                    var tradision_moment = (rr.SecondOfDay / 3600).ToString("D2") + ":" + ((rr.SecondOfDay % 3600) / 60).ToString("D2");
                    string offset_d = ("-" + tohhmm(rr.StandardOffset, 0)).Replace("--", "");
                    string offset_b = ("-" + tohhmm(rr.OffsetBefore, 0)).Replace("--", "");
                    string offset_a = ("-" + tohhmm(rr.OffsetAfter, 0)).Replace("--", "");
                    sb.AppendLine($"Month{rr.Month},DayOfMonth:{rr.DayOfMonth},DayOfWeek:{rr.DayOfWeek}" +
                    $", SecondOfDay:{tradision_moment},TimeDefinition: {rr.TimeDefinition}," +
                    $"StandardOffset: {offset_d},OffsetBefore: {offset_b},OffsetAfter: {offset_a}");
                }
                else
                {
                    sb.AppendLine($"Month{rr.Month},DayOfMonth:{rr.DayOfMonth},DayOfWeek:{rr.DayOfWeek}" +
                    $", SecondOfDay:{rr.SecondOfDay},TimeDefinition: {rr.TimeDefinition}," +
                    $"StandardOffset: {rr.StandardOffset},OffsetBefore: {rr.OffsetBefore},OffsetAfter: {rr.OffsetAfter}");
                }
                fake_posixs += fake_posix(rr) + ";";
            }
            Regex regex = new Regex(@"(;(.*?),|;$)");
            fake_posixs = regex.Replace(fake_posixs, ",");
            regex = new Regex(@"(,$)");
            fake_posixs = "fake_posixs:" + regex.Replace(fake_posixs, "");
            sb.AppendLine(fake_posixs);
            sb.AppendLine();


            textBox3.Text = sb.ToString();





Thought for
171s
Expand for details
回答
ユーザーのクエリ「アメリカニューヨークは動くがオーストラリアがうまく動かない」に対して、提供されたコードとデータ（ZoneInfoRules）を分析した結果、問題の原因と解決策を以下に説明します。

問題の概要
このコードは、指定されたタイムゾーンのUTCオフセットと遷移時刻を計算し、ローカル時刻を返すものです。ニューヨーク（America/New_York）では正しく動作するが、オーストラリアのロード・ハウ島（Australia/LHI）では期待通りに動作しないとのことです。具体的には、Australia/LHIで特定の時期（例えば1月）のオフセットが正しく反映されない問題が考えられます。

コードの動作分析
コードの主要部分であるget_rule_offset関数は、以下の手順で動作します：

入力時刻の取得
unixTimestampとして、テスト日時（Properties.Settings.Default.testdt）または現在時刻をUnixタイムスタンプ（秒）に変換。
遷移時刻とオフセットの計算
SavTrans（遷移時刻）とSavOffsets（オフセット）の配列を初期化。
現在の年（thisyear）に基づき、各ルール（tz.Rules）の遷移時刻を計算。
遷移時刻は、ローカル時刻（例: 02:00）をUTC時刻として扱い、OffsetBeforeを引いてUTCでの遷移時刻を求めます。
SavOffsets[0]は標準オフセット（StandardOffset）に設定され、それ以降は各ルールのOffsetAfterが格納されます。
ソートと検索
SavTransとSavOffsetsをソートし、指定されたunixTimestampに対してバイナリーサーチで適切なインデックスを見つけ、オフセットを適用してローカル時刻を計算。
出力
遷移時刻とオフセットをtextBox3に表示し、ローカル時刻を文字列として返す。
ニューヨークでの動作（正しく動作）
ニューヨークのZoneInfoRulesは以下です：

ルール1: Month 3 (3月), DayOfMonth 8, DayOfWeek 7 (日曜), 02:00, StandardOffset 5, OffsetBefore 5, OffsetAfter 4
ルール2: Month 11 (11月), DayOfMonth 1, DayOfWeek 7 (日曜), 02:00, StandardOffset 5, OffsetBefore 4, OffsetAfter 5
解釈:
標準オフセット: -5時間（-18000秒、西経側のため負）
3月の第2日曜02:00に標準時間(-5)から夏時間(-4)へ
11月の第1日曜02:00に夏時間(-4)から標準時間(-5)へ
出力例 (2025年):
UTCtransition: 2025-03-09 07:00:00Z, offset: -4
UTCtransition: 2025-11-02 06:00:00Z, offset: -5
動作:

3月9日 02:00（ローカル標準時間、-5時間）= UTC 07:00（02:00 + 5）。
コードでは、dtを3月9日 02:00 UTCとして設定し、SavTrans[i] = dt.ToUnixTimeSeconds() - rr.OffsetBeforeで- (-5*3600)を計算、すなわち+5時間を加算し、07:00 UTCに調整。
1月（遷移前）はSavOffsets[0]（標準オフセット -5時間）が使用され、正しい。
オーストラリア/LHIでの動作（問題発生）
Australia/LHIのZoneInfoRulesは以下です：

ルール1: Month 4 (4月), DayOfMonth 1, DayOfWeek 7 (日曜), 02:00, StandardOffset -10:30, OffsetBefore -11, OffsetAfter -10:30
ルール2: Month 10 (10月), DayOfMonth 1, DayOfWeek 7 (日曜), 02:00, StandardOffset -10:30, OffsetBefore -10:30, OffsetAfter -11
解釈（修正）:
標準オフセット: +10:30（+37800秒、東経側のため正）
4月の第1日曜02:00に夏時間(+11)から標準時間(+10:30)へ
10月の第1日曜02:00に標準時間(+10:30)から夏時間(+11)へ
※ZoneInfoRulesの符号が逆（-10:30, -11）と記載されているが、出力（offset: 10.5, 11）とfake_posixs（<+10:30>, <+11>）から、正しい値は正と推測。
出力例 (2025年):
UTCtransition: 2025-04-05 15:00:00Z, offset: 10.5
UTCtransition: 2025-10-04 15:30:00Z, offset: 11
動作:

4月6日 02:00（ローカル夏時間、+11時間）= UTC 4月5日 15:00（02:00 - 11）。
10月5日 02:00（ローカル標準時間、+10:30）= UTC 10月4日 15:30（02:00 - 10.5）。
コードでは、dtを4月6日 02:00 UTCとし、OffsetBefore（+11*3600 = 39600秒）を引いて15:00 UTCに調整。
問題点:

2025年1月のような、年内最初の遷移（4月）前の時期を計算する場合、SavOffsets[0]（標準オフセット +10:30）が適用される。
しかし、Australia/LHIでは、前年10月から夏時間（+11）が始まり、4月まで続くため、1月は+11時間であるべき。
結果、1月のオフセットが+10:30となり、実際の+11と異なり誤り。
原因
コードは指定年の遷移のみを計算し、最初の遷移前のオフセットとしてSavOffsets[0] = tz.Rules[0].StandardOffsetを使用します：

ニューヨーク: 年始（1月）が標準時間（-5）で、3月に夏時間へ移行。SavOffsets[0]が標準オフセットで正しい。
Australia/LHI: 年始（1月）が夏時間（+11）で、4月に標準時間へ移行。SavOffsets[0]が標準オフセット（+10:30）となり誤り。
南半球のタイムゾーンでは、年始が夏時間中の場合があり、単純に標準オフセットを適用すると不整合が生じます。

解決策
この問題を解決するには、指定年の遷移だけでなく、前年の遷移も考慮して正しい初期オフセットを設定する必要があります。以下に修正案を示します：

前年の遷移を含める

thisyear - 1の遷移を計算し、SavTransとSavOffsetsに追加。
ソート後、指定時刻に適用される正しいオフセットを選択。
csharp

Collapse

Wrap

Copy
int thisyear = DateTime.Now.Year;
for (int year = thisyear - 1; year <= thisyear; year++)
{
    foreach (var rr in tz.Rules)
    {
        DateTimeOffset dt = new DateTime(year, (int)rr.Month, (int)rr.DayOfMonth, rr.SecondOfDay/3600, 0, 0, DateTimeKind.Utc);
        // 日曜日に調整
        int diff = (7 - ((int)dt.DayOfWeek - rr.DayOfWeek % 7 + 7) % 7) % 7;
        dt = dt.AddDays(diff);
        SavTrans[i] = dt.ToUnixTimeSeconds() - rr.OffsetBefore;
        SavOffsets[i + 1] = rr.OffsetAfter;
        i++;
    }
}
SavTrans[i] = MaxSeconds;
SavOffsets[0] = tz.Rules[0].StandardOffset; // 必要に応じて調整
Array.Sort(SavTrans, SavOffsets);
初期オフセットの動的設定

年始の正しいオフセットを判定し、SavOffsets[0]に設定。
例えば、Australia/LHIの場合、前年10月の遷移後のオフセット（+11）を適用。
簡易修正

指定時刻が最初の遷移より前なら、前年の最終オフセットを適用するロジックを追加。
結論
現在のコードは、ニューヨークでは年始が標準時間であるため正しく動作しますが、Australia/LHIでは年始が夏時間であるため、初期オフセットが誤って標準時間（+10:30）となり、期待される夏時間（+11）と一致しません。修正するには、前年の遷移を考慮するか、初期オフセットを適切に設定する対応が必要です。ユーザーがどの時期に問題を感じているか（例: 1月のオフセット誤り）を特定すれば、さらに具体的な修正が可能です。







fake_posixがぎゃくになっているのはなおせる？

            sb.AppendLine("ZoneInfoRules: ");
            string fake_posixs = "";
            foreach (var rr in zoneInfo.Rules)
            {
                if (ch)
                {
                    var tradision_moment = (rr.SecondOfDay / 3600).ToString("D2") + ":" + ((rr.SecondOfDay % 3600) / 60).ToString("D2");
                    string offset_d = ("-" + tohhmm(rr.StandardOffset, 0)).Replace("--", "");
                    string offset_b = ("-" + tohhmm(rr.OffsetBefore, 0)).Replace("--", "");
                    string offset_a = ("-" + tohhmm(rr.OffsetAfter, 0)).Replace("--", "");
                    sb.AppendLine($"Month{rr.Month},DayOfMonth:{rr.DayOfMonth},DayOfWeek:{rr.DayOfWeek}" +
                    $", SecondOfDay:{tradision_moment},TimeDefinition: {rr.TimeDefinition}," +
                    $"StandardOffset: {offset_d},OffsetBefore: {offset_b},OffsetAfter: {offset_a}");
                }
                else
                {
                    sb.AppendLine($"Month{rr.Month},DayOfMonth:{rr.DayOfMonth},DayOfWeek:{rr.DayOfWeek}" +
                    $", SecondOfDay:{rr.SecondOfDay},TimeDefinition: {rr.TimeDefinition}," +
                    $"StandardOffset: {rr.StandardOffset},OffsetBefore: {rr.OffsetBefore},OffsetAfter: {rr.OffsetAfter}");
                }
                fake_posixs += fake_posix(rr) + ";";
            }
            Regex regex = new Regex(@"(;(.*?),|;$)");
            fake_posixs = regex.Replace(fake_posixs, ",");
            regex = new Regex(@"(,$)");
            fake_posixs = "fake_posixs:" + regex.Replace(fake_posixs, "");
            sb.AppendLine(fake_posixs);
            sb.AppendLine();


            textBox3.Text = sb.ToString();


ZoneInfoRules: 
Month4,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: -10:30,OffsetBefore: -11,OffsetAfter: -10:30
Month10,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: -10:30,OffsetBefore: -10:30,OffsetAfter: -11
fake_posixs:<+10:30>-10:30<+11>-11,M4.1.0/2,M10.1.0/2


fake_posixs:<+10:30>-10:30<+11>-11,M10.1.0/2,M4.1.0/2がただしい




回答
ユーザーの質問「fake_posixが逆になっているのはなおせる？」に対して、提供されたコードとデータをもとに、fake_posixsの順序が逆になっている問題を修正する方法を説明します。

問題の概要
現在のコードでは、fake_posixs文字列が以下のようになっています：

実際の出力: fake_posixs:<+10:30>-10:30<+11>-11,M4.1.0/2,M10.1.0/2
期待される出力: fake_posixs:<+10:30>-10:30<+11>-11,M10.1.0/2,M4.1.0/2
具体的には、ルール部分（M4.1.0/2とM10.1.0/2）の順序が逆になっています。これは、Australia/LHIのような南半球のタイムゾーンでは、夏時間（DST）が10月（春）に始まり、4月（秋）に終わるため、POSIX形式では「夏時間開始（M10）→夏時間終了（M4）」の順が正しいのですが、現在のコードではzoneInfo.Rulesの配列順（4月→10月）に従ってそのまま追加されているため逆になっています。

コードの動作分析
現在のコードの関連部分を見てみましょう：

csharp

Collapse

Wrap

Copy
string fake_posixs = "";
foreach (var rr in zoneInfo.Rules)
{
    fake_posixs += fake_posix(rr) + ";";
}
Regex regex = new Regex(@"(;(.*?),|;$)");
fake_posixs = regex.Replace(fake_posixs, ",");
regex = new Regex(@"(,$)");
fake_posixs = "fake_posixs:" + regex.Replace(fake_posixs, "");
sb.AppendLine(fake_posixs);
zoneInfo.Rulesの順序:
ルール1: Month 4 (4月), OffsetBefore -11, OffsetAfter -10:30（夏時間終了）
ルール2: Month 10 (10月), OffsetBefore -10:30, OffsetAfter -11（夏時間開始）
fake_posix(rr): 各ルールからPOSIX形式の文字列（例: M4.1.0/2やM10.1.0/2）を生成。
処理: foreachでzoneInfo.Rulesを順に処理し、fake_posixsに追加。結果として、M4.1.0/2,M10.1.0/2の順になる。
問題の原因:

zoneInfo.Rulesの配列は4月→10月の順で格納されており、そのままforeachで処理されるため、fake_posixsも同じ順序（M4.1.0/2,M10.1.0/2）に。
POSIX形式では、夏時間開始（M10）が先、終了（M4）が後に来るべきだが、コードがルールの順序を考慮せず単純に追加している。
修正方法
fake_posixsのルール部分を正しい順序（夏時間開始→夏時間終了）に並べるには、以下のいずれかの方法で対応可能です。

方法1: ルールをソートする
zoneInfo.Rulesを処理する前に、夏時間開始ルール（OffsetAfterが標準オフセットと異なる）を先に持ってくるようソートします。

csharp

Collapse

Wrap

Copy
string fake_posixs = "";
var rules = zoneInfo.Rules.OrderByDescending(r => r.OffsetAfter != r.StandardOffset).ToArray(); // 夏時間開始を先に
foreach (var rr in rules)
{
    fake_posixs += fake_posix(rr) + ";";
}
Regex regex = new Regex(@"(;(.*?),|;$)");
fake_posixs = regex.Replace(fake_posixs, ",");
regex = new Regex(@"(,$)");
fake_posixs = "fake_posixs:" + regex.Replace(fake_posixs, "");
sb.AppendLine(fake_posixs);
説明:
OrderByDescending(r => r.OffsetAfter != r.StandardOffset)で、夏時間開始ルール（OffsetAfterがStandardOffsetと異なる）を先に並べる。
Australia/LHIの場合、10月のルール（OffsetAfter -11 ≠ StandardOffset -10:30）が先になり、次に4月のルール（OffsetAfter -10:30 = StandardOffset -10:30）が来る。
方法2: 明示的に順序を指定する
南半球と北半球でルールの順序が異なることを考慮し、標準オフセットとオフセットの変化を基に条件分岐で順序を調整します。

csharp

Collapse

Wrap

Copy
string fake_posixs = "";
var stdOffset = zoneInfo.Rules[0].StandardOffset;
var ruleList = zoneInfo.Rules.ToList();
var dstStartRule = ruleList.First(r => r.OffsetAfter != stdOffset); // 夏時間開始
var dstEndRule = ruleList.First(r => r.OffsetAfter == stdOffset);   // 夏時間終了

fake_posixs += fake_posix(dstStartRule) + ";"; // 夏時間開始（M10）
fake_posixs += fake_posix(dstEndRule) + ";";   // 夏時間終了（M4）

Regex regex = new Regex(@"(;(.*?),|;$)");
fake_posixs = regex.Replace(fake_posixs, ",");
regex = new Regex(@"(,$)");
fake_posixs = "fake_posixs:" + regex.Replace(fake_posixs, "");
sb.AppendLine(fake_posixs);
説明:
dstStartRule: 夏時間開始（OffsetAfterがStandardOffsetと異なるルール、10月）。
dstEndRule: 夏時間終了（OffsetAfterがStandardOffsetと一致するルール、4月）。
これを明示的に順序付けして追加。
方法3: 単純に逆順にする（簡易的）
Australia/LHI専用であれば、ルールを逆順に処理するだけでも対応可能ですが、他のタイムゾーンで問題が出る可能性があるため非推奨です。

csharp

Collapse

Wrap

Copy
string fake_posixs = "";
foreach (var rr in zoneInfo.Rules.Reverse())
{
    fake_posixs += fake_posix(rr) + ";";
}
Regex regex = new Regex(@"(;(.*?),|;$)");
fake_posixs = regex.Replace(fake_posixs, ",");
regex = new Regex(@"(,$)");
fake_posixs = "fake_posixs:" + regex.Replace(fake_posixs, "");
sb.AppendLine(fake_posixs);
修正後の期待される出力
例えば方法2を適用した場合、Australia/LHIのデータで以下が得られます：

text

Collapse

Wrap

Copy
ZoneInfoRules: 
Month10,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: -10:30,OffsetBefore: -10:30,OffsetAfter: -11
Month4,DayOfMonth:1,DayOfWeek:7, SecondOfDay:02:00,TimeDefinition: 1,StandardOffset: -10:30,OffsetBefore: -11,OffsetAfter: -10:30
fake_posixs:<+10:30>-10:30<+11>-11,M10.1.0/2,M4.1.0/2
オフセット部分（<+10:30>-10:30<+11>-11）は変わらず、ルール部分がM10.1.0/2,M4.1.0/2となり、期待通り。
注意点
fake_posix(rr)の実装: この関数がどのようにPOSIX文字列を生成しているか不明ですが、質問のデータから正しく動作していると仮定しています。もしオフセット部分も調整が必要なら、そのロジックも見直す必要があります。
汎用性: 北半球（例: ニューヨーク）では夏時間開始が3月、終了が11月なので、方法1または2が両方のケースに対応可能。
結論
fake_posixsの順序が逆になっている問題は、zoneInfo.Rulesの配列順をそのまま使うことが原因です。方法1（ソート）または方法2（明示的順序指定）で、夏時間開始ルールを先に、終了ルールを後にするよう修正すれば解決します。Australia/LHIだけでなく他のタイムゾーンにも対応するなら、方法2がより安全で明確です。必要に応じて、fake_posix(rr)の詳細を教えていただければ、さらに具体的な調整も可能です。








How can Grok help?


DeepSearch


Think

Grok 3

