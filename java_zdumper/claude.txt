https://claude.ai/chat/c798836c-2db8-49cb-b9a5-7f4e532ad5e4
help コマンドを追加したいとのことですね。プログラムに使い方のヘルプを表示する機能を実装します。
ZoneInfoDisplay with Help Commandコード 
元のコードに以下の機能を追加しました：

help コマンドの実装

java ZoneInfoDisplay help で詳細なヘルプが表示されます
コマンドライン引数の解説と使用例を表示します
プログラムの機能概要も説明します


タイムゾーンリスト表示機能

java ZoneInfoDisplay list で利用可能なすべてのタイムゾーンを表示します
地域ごとにグループ化して見やすくしています
タイムゾーンの総数も表示されます


引数チェックの改善

無効なタイムゾーンIDが指定された場合、listコマンドの存在を伝えます
無効なモードが指定された場合、有効なモードの一覧を表示します
どの位置でもhelpコマンドが使用できるようになりました



このヘルプ機能により、プログラムの使い方が明確になり、ユーザーがより簡単に適切なタイムゾーンとモードを選択できるようになりました。


import java.time.*;
import java.time.zone.ZoneOffsetTransition;
import java.time.zone.ZoneOffsetTransitionRule;
import java.time.zone.ZoneRules;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

public class ZoneInfoDisplay {

    public static void main(String[] args) {
        // helpコマンドの処理
        if (args.length > 0 && args[0].equalsIgnoreCase("help")) {
            displayHelp();
            return;
        }

        // タイムゾーンIDをコマンドライン引数から取得（デフォルトはAsia/Tokyo）
        String zoneIdString = (args.length > 0) ? args[0] : "Asia/Tokyo";
        String mode = (args.length > 1) ? args[1] : "U";
        
        // helpコマンドのチェック（第2引数としても許可）
        if (zoneIdString.equalsIgnoreCase("help") || mode.equalsIgnoreCase("help")) {
            displayHelp();
            return;
        }

        ZoneId zoneId;
        try {
            zoneId = ZoneId.of(zoneIdString); // パラメータからZoneIdを生成
        } catch (DateTimeException e) {
            System.out.println("無効なタイムゾーンID: " + zoneIdString);
            System.out.println("使用可能なタイムゾーンIDの一覧を表示するには「list」と入力してください。");
            System.out.println("ヘルプを表示するには「help」と入力してください。");
            return;
        }

        // タイムゾーンリストの表示
        if (zoneIdString.equalsIgnoreCase("list")) {
            displayAvailableZones();
            return;
        }

        // UOL のリスト（例として "Asia/Tokyo", "America/New_York", "Europe/London"）
        List<String> uolZones = List.of("U", "O", "L");

        // 判定
        if (uolZones.contains(mode)) {
        } else {
            System.out.println("無効な時刻モード: " + mode);
            System.out.println("有効なモード: U (UTC時刻), O (OSタイムゾーン時刻), L (ローカルタイムゾーン時刻)");
            System.out.println("ヘルプを表示するには「help」と入力してください。");
            return;
        }
        displayZoneInfo(zoneId, mode);// 指定されたZoneIdで情報を表示
        showTransitionsForPeriod(zoneId, mode); // 指定されたZoneIdで情報を表示    
    }

    /**
     * ヘルプメッセージを表示する
     */
    public static void displayHelp() {
        System.out.println("===== ZoneInfoDisplay ヘルプ =====");
        System.out.println("このプログラムはタイムゾーンの詳細情報と遷移情報を表示します。");
        System.out.println();
        
        System.out.println("使用方法:");
        System.out.println("  java ZoneInfoDisplay [タイムゾーンID] [表示モード]");
        System.out.println("  java ZoneInfoDisplay help       - このヘルプを表示");
        System.out.println("  java ZoneInfoDisplay list       - 利用可能なタイムゾーンIDの一覧を表示");
        System.out.println();
        
        System.out.println("引数:");
        System.out.println("  タイムゾーンID - 例: Asia/Tokyo, America/New_York, Europe/London");
        System.out.println("                 デフォルト: Asia/Tokyo");
        System.out.println();
        
        System.out.println("  表示モード    - 時刻の表示方法を指定:");
        System.out.println("                 U: UTC時刻 (デフォルト)");
        System.out.println("                 O: OS設定のタイムゾーン時刻");
        System.out.println("                 L: 指定したタイムゾーンのローカル時刻");
        System.out.println();
        
        System.out.println("例:");
        System.out.println("  java ZoneInfoDisplay Asia/Tokyo U    - 東京のタイムゾーン情報をUTC時刻で表示");
        System.out.println("  java ZoneInfoDisplay Europe/London L - ロンドンのタイムゾーン情報をローカル時刻で表示");
        System.out.println("  java ZoneInfoDisplay America/New_York O - ニューヨークのタイムゾーン情報をOS時刻で表示");
        System.out.println();
        
        System.out.println("その他コマンド:");
        System.out.println("  java ZoneInfoDisplay list       - 利用可能なタイムゾーンのリストを表示");
        System.out.println("===============================");
    }

    /**
     * 利用可能なタイムゾーンIDの一覧を表示する
     */
    public static void displayAvailableZones() {
        Set<String> zoneIds = ZoneId.getAvailableZoneIds();
        Set<String> sortedZones = new TreeSet<>(zoneIds); // アルファベット順にソート

        System.out.println("===== 利用可能なタイムゾーンID =====");
        System.out.println("タイムゾーン数: " + sortedZones.size());
        
        // 地域ごとにグループ化して表示
        String currentRegion = "";
        for (String id : sortedZones) {
            String[] parts = id.split("/");
            if (parts.length > 1) {
                // リージョンが変わったら見出しを表示
                if (!parts[0].equals(currentRegion)) {
                    currentRegion = parts[0];
                    System.out.println("\n" + currentRegion + ":");
                }
                System.out.println("  " + id);
            } else {
                // リージョンなしの特殊なゾーン
                if (!currentRegion.equals("その他")) {
                    currentRegion = "その他";
                    System.out.println("\nその他:");
                }
                System.out.println("  " + id);
            }
        }
        System.out.println("\n使い方の詳細は「help」コマンドで確認できます。");
    }

    public static void displayZoneInfo(ZoneId zoneId, String mode) {
        ZoneRules rules = zoneId.getRules();

        // 2. 過去の遷移リストを取得
        List<ZoneOffsetTransition> transitions = rules.getTransitions();
        // 3. 毎年繰り返される遷移ルールを取得（Asia/Tokyoでは通常空）
        List<ZoneOffsetTransitionRule> transitionRules = rules.getTransitionRules();

        ZoneId zoneIdos = ZoneId.systemDefault();
        // 4. 遷移が存在するかチェック
        if (transitions.isEmpty()) {
            // 遷移がない場合、現在の時差を表示
            ZoneOffset offset = rules.getOffset(Instant.now());
            System.out.println("遷移はありません。現在の時差: " + offset);
        } else {
            // 5. 最初の遷移前の時差を表示
            Instant firstInstant = transitions.get(0).getInstant().minusSeconds(1);
            ZoneOffset initialOffset = rules.getOffset(firstInstant);

            System.out.println("遷移時刻" + mode + " 変更前時差  変更後時差");
            System.out.println("---------- ---------  " + initialOffset);
            // 6. 各遷移を表示
            for (ZoneOffsetTransition transition : transitions) {
                Instant instant = transition.getInstant();
                ZoneOffset offsetBefore = transition.getOffsetBefore();
                ZoneOffset offsetAfter = transition.getOffsetAfter();
                LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zoneId);
                LocalDateTime localos = LocalDateTime.ofInstant(instant, zoneIdos);
                switch (mode) {
                    case "U":
                        System.out.print(instant);
                        break;
                    case "O":
                        System.out.print(localos);
                        break;
                    case "L":
                        System.out.print(localDateTime);
                        break;
                    default:
                        System.out.print(instant);
                        break;
                }

                System.out.println(": " + offsetBefore + " -> " + offsetAfter);
            }

            // 7. 最後の遷移後の時差を表示
            Instant lastInstant = transitions.get(transitions.size() - 1).getInstant().plusSeconds(1);
            ZoneOffset finalOffset = rules.getOffset(lastInstant);
            System.out.println("最後の遷移後の時差: " + finalOffset);
        }

        // 8. 遷移ルールが存在するかチェック
        if (!transitionRules.isEmpty()) {
            System.out.println("毎年繰り返される遷移ルール:");
            for (ZoneOffsetTransitionRule rule : transitionRules) {
                System.out.println(rule);
            }
        } else {
            System.out.println("毎年繰り返される遷移ルールはありません。");
        }
    }

    public static void showTransitionsForPeriod(ZoneId zoneId, String mode) {
        String zoneIdStr = zoneId.getId();
        ZoneRules rules = zoneId.getRules();

        Instant now = Instant.now();
        // 去年から来年までの期間を定義
        Instant oneYearAgo = now.minusSeconds(365 * 24 * 60 * 60L);
        Instant oneYearLater = now.plusSeconds(365 * 24 * 60 * 60L);

        System.out.println("タイムゾーン: " + zoneIdStr);
        System.out.println("現在時刻: " + now);
        System.out.println("現在のUTCオフセット: " + rules.getOffset(now));
        System.out.println("-----------------------------");

        // 過去の遷移を取得
        List<ZoneOffsetTransition> historicalTransitions = rules.getTransitions();

        // 将来の遷移は遷移ルールから計算
        List<ZoneOffsetTransitionRule> transitionRules = rules.getTransitionRules();

        // 過去と将来の遷移をマージする
        List<ZoneOffsetTransition> allTransitions = new ArrayList<>(historicalTransitions);

        // 遷移ルールから将来の遷移を生成（通常は夏時間のルール）
        for (ZoneOffsetTransitionRule rule : transitionRules) {
            // 現在から来年までのルールを適用
            int currentYear = LocalDateTime.ofInstant(now, ZoneId.of("UTC")).getYear();
            for (int year = currentYear - 1; year <= currentYear + 1; year++) {
                ZoneOffsetTransition transition = rule.createTransition(year);
                allTransitions.add(transition);
            }
        }

        // 遷移時刻でソート
        Collections.sort(allTransitions, Comparator.comparing(ZoneOffsetTransition::getInstant));

        // 期間内の遷移を表示
        boolean foundTransitions = false;
        ZoneId zoneIdos = ZoneId.systemDefault();

        System.out.println("遷移時刻" + mode + " 変更前時差 変更後時差 差分 ギャップ(時計を進める,存在しない時間帯) オーバーラップ(時計を戻す,重複する時間帯)");

        for (ZoneOffsetTransition transition : allTransitions) {
            Instant transitionInstant = transition.getInstant();
            if (transitionInstant.isAfter(oneYearAgo) && transitionInstant.isBefore(oneYearLater)) {
                foundTransitions = true;
                LocalDateTime localDateTime = LocalDateTime.ofInstant(transitionInstant, zoneId);
                LocalDateTime localos = LocalDateTime.ofInstant(transitionInstant, zoneIdos);
                switch (mode) {
                    case "U":
                        System.out.print(transitionInstant);
                        break;
                    case "O":
                        System.out.print(localos);
                        break;
                    case "L":
                        System.out.print(localDateTime);
                        break;
                    default:
                        System.out.print(transitionInstant);
                        break;
                }

                System.out.println(": " + transition.getOffsetBefore() + "->" + transition.getOffsetAfter() + " " + (transition.getOffsetAfter().getTotalSeconds() - transition.getOffsetBefore().getTotalSeconds()) / 60
                        + " 分" + " " + transition.isGap() + " " + transition.isOverlap());
            }
        }

        if (!foundTransitions) {
            System.out.println("指定期間内（去年から来年）に遷移はありません。");

            if (rules.getTransitions().isEmpty() && rules.getTransitionRules().isEmpty()) {
                System.out.println("このタイムゾーンは固定オフセットを持っています: " + rules.getOffset(Instant.now()));
            } else {
                System.out.println("このタイムゾーンは遷移を持ちますが、指定期間内には変更がありません。");

                // 固定オフセットではないが期間内に遷移がない場合、直近の過去の遷移を表示
                if (!historicalTransitions.isEmpty()) {
                    ZoneOffsetTransition lastTransition = historicalTransitions.get(historicalTransitions.size() - 1);
                    System.out.println("直近の過去の遷移: " + lastTransition.getInstant());
                    System.out.println("  変更前オフセット: " + lastTransition.getOffsetBefore());
                    System.out.println("  変更後オフセット: " + lastTransition.getOffsetAfter());
                }
            }
        }
    }
}